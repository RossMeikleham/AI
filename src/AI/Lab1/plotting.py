# Plots the sample data generated by the Haskell program
import matplotlib.pyplot as pl
import numpy as np

# Normalise a list of samples between 1.0 and 0.0
def positiveNormalise(data, minV = None, maxV = None):
    if minV is None:
        minV = min(data)

    if maxV is None:
        maxV = max(data)

    def normaliseItem(item):
        return (item - minV) / (maxV - minV)

    return [normaliseItem(i) for i in data]

# Normalise a list of samples between 1.0 and -1.0 if samples vary between 
# positive and negative, otherwise normalises samples between 1.0 and 0.0
def normalise(data, minV = None, maxV = None):
    
    if minV is None:
        minV = min(data)
    
    if maxV is None:
        maxV = max(data)

    if minV >= 0.0:
        return positiveNormalise(data, minV, maxV)
    

    def normaliseItem(item):
        return ((2.0 * (item - minV)) / (maxV - minV)) - 1.0
        

    return [normaliseItem(i) for i in data]


# Takes a list of dictionaries containing information on the files
# to plot and information on how they should be plotted, and plots
# them. Returns a list of handles of the plotted graphs
def plotGraphs(plots, minY = None, maxY = None):

    for plot in plots:
        data = np.loadtxt(plot["fileName"], delimiter=",")
        dxs = data[:,0]
        dys = data[:,1]

        pl.plot(dxs, normalise(dys, minY, maxY), 
            color = plot["color"], label = plot["label"])
        
        



def plotData():
    plotData = [{"fileName": "Laboratory.csv", "color":"red", "label":"Original Signal"},
                {"fileName": "Energy.csv", "color":"green", "label":"Energy 30ms"},
                {"fileName": "Magnitude.csv", "color":"blue", "label":"Magnitude 30ms"},
                {"fileName": "ZeroCrossingRate.csv", "color":"cyan", "label":"Zero Crossing Rate 30ms"}
                ]
    
    plotGraphs(plotData)
    pl.title('Functions applied to Samples')
    pl.xlabel("Time ms")
    pl.ylabel("Normalised signals S[n]")
    pl.grid(True)
    pl.legend()
    pl.show()


def main():
    plotData()

main()
