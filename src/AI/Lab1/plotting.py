# Plots the sample data generated by the Haskell program
import matplotlib.pyplot as pl
import numpy as np

ax = pl.subplot(111)

# Normalise a list of samples between 1.0 and 0.0
def positiveNormalise(data, minV = None, maxV = None):
    if minV is None:
        minV = min(data)

    if maxV is None:
        maxV = max(data)

    def normaliseItem(item):
        return (item - minV) / (maxV - minV)

    return [normaliseItem(i) for i in data]

# Normalise a list of samples between 1.0 and -1.0 if 
# samples vary betweenpositive and negative, otherwise 
# normalises samples between 1.0 and 0.0
def normalise(data, minV = None, maxV = None):
    
    if minV is None:
        minV = min(data)
    
    if maxV is None:
        maxV = max(data)

    if minV >= 0.0:
        return positiveNormalise(data, minV, maxV)
    

    def normaliseItem(item):
        return ((2.0 * (item - minV)) / (maxV - minV)) - 1.0
        

    return [normaliseItem(i) for i in data]


# Takes a list of dictionaries containing information on the files
# to plot and information on how they should be plotted, and plots
# them. Returns a list of handles of the plotted graphs
def plotGraphs(plots, minY = None, maxY = None):

    for plot in plots:
        data = np.loadtxt(plot["fileName"], delimiter=",")
        dxs = data[:,0]
        dys = data[:,1]

        ax.plot(dxs, normalise(dys, minY, maxY), 
            color = plot["color"], label = plot["label"])
                
        
 
def plotIdealDelay():
    
    plotsData = [{"fileName": "Laboratory.csv", 
		  "color": "red", 
		  "label": "Signal"},

                 {"fileName": "Delay5.csv", 
		  "color": "green", 
		  "label": "5ms Window"},

                 {"fileName": "Delay10.csv", 
		  "color": "blue", 
		  "label": "10ms Window"},

                 {"fileName": "Delay15.csv", 
		  "color": "black", 
		  "label": "15ms Window"}
                 ]

    plotGraphs(plotsData)

    pl.title('Ideal Delay')
    pl.ylabel("Normalised S[n]")
    pl.xlabel("Time in Milliseconds")
   
    pl.grid(True)
    #Place the legend
    box = ax.get_position()
    ax.legend(loc = 'center left', bbox_to_anchor=(1, 0.5))
    
    pl.savefig('idealDelay.png', bbox_inches='tight')





def plotMovingAverage():
    
    plotsData = [{"fileName": "Laboratory.csv", 
		  "color": "red", 
		  "label": "Signal"},

                 {"fileName": "MAverage5.csv", 
		  "color": "green", 
		  "label": "MA 5ms"},

                 {"fileName": "MAverage10.csv", 
		  "color": "blue", 
		  "label": "MA 10ms"},

                 {"fileName": "MAverage15.csv", 
		  "color": "black", 
		  "label": "MA 15ms"}
                ]
    
    plotGraphs(plotsData)

    pl.title('Moving Average')
    pl.ylabel("Normalised S[n]")
    pl.xlabel("Time in Milliseconds")

    pl.grid(True)
    
    #Place the legend
    box = ax.get_position()
    ax.legend(loc = 'center left', bbox_to_anchor=(1, 0.5))
    
    pl.savefig('movingAverage.png', bbox_inches='tight')



def plotConvolution():
     
    plotData = [{"fileName": "Convolution.csv", 
	         "color": "red", 
		 "label": "Signal"}]
		

    plotGraphs(plotData)

    pl.title('Convolution')
    pl.ylabel("Normalised y[n]")
    pl.xlabel("Time in Milliseconds")

    plotGraphs(plotData)
    pl.title('Functions applied to Samples')
    pl.xlabel("Time ms")
    pl.ylabel("Normalised signals S[n]")
    pl.grid(True)

    
    pl.savefig('convolution.png', bbox_inches='tight')
    pl.legend()
 
 



def plotMultiple():
    plotData = [{"fileName": "Laboratory.csv", 
           "color":"red", 
           "label":"Original Signal"},

           {"fileName": "Energy.csv", 
            "color":"green", 
            "label":"Energy 30ms"},

           {"fileName": "Magnitude.csv", 
            "color":"blue", 
            "label":"Magnitude 30ms"},

           {"fileName": "ZeroCrossingRate.csv", 
            "color":"cyan", 
            "label":"Zero Crossing Rate\n 30ms"}
         ]
    
    plotGraphs(plotData)
    pl.title('Functions applied to Samples')
    pl.xlabel("Time ms")
    pl.ylabel("Normalised signals S[n]")
    pl.grid(True)
    
    #Place the legend
    box = ax.get_position()
    #ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    ax.legend(loc = 'center left', bbox_to_anchor=(1, 0.5))
    
    pl.savefig('signals.svg', bbox_inches='tight')


def main():
    plotIdealDelay()
    ax.clear()
    plotMovingAverage()
    ax.clear()
    plotConvolution()
    ax.clear()
    plotMultiple()

main()
